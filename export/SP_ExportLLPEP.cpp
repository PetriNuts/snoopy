//////////////////////////////////////////////////////////////////////
// $Author: alextov $
// $Version: 0.1 $
// $Date: 2005/10/06 $
// Short Description: export to PEP low level format
//////////////////////////////////////////////////////////////////////

#include "export/SP_ExportLLPEP.h"
#include "sp_defines.h"
#include "sp_revision.h"

#include "sp_ds/SP_DS_Edge.h"
#include "sp_gui/mdi/SP_MDI_Doc.h"
#include "sp_ds/SP_DS_Graph.h"


SP_ExportLLPEP::SP_ExportLLPEP()
{
}



SP_ExportLLPEP::~SP_ExportLLPEP()
{
}



bool
SP_ExportLLPEP::AcceptsDoc(SP_MDI_Doc* p_doc)
{
  CHECK_POINTER(p_doc, return false);
  CHECK_POINTER(p_doc->GetGraph(), return false);
  wxString cName = p_doc->GetNetclassName();
  return (	cName == SP_DS_PN_CLASS ||
			cName == SP_DS_TIMEPN_CLASS);

}


bool
SP_ExportLLPEP::DoWrite()
{
  // just to be sure
  m_placeIdNrMap.clear();
  m_trIdNrMap.clear();

  m_file.Write(wxT("PEP\nPTNet\nFORMAT_N\n"));
  m_file.Write(wxT("%c Generated by "));
  m_file.Write(SP_APP_LONG_NAME);
  m_file.Write(wxT("%\n"));
  WritePlaces();
  WriteTransitions();
  WriteArcs();



  m_placeIdNrMap.clear();
  m_trIdNrMap.clear();

  return !m_bError;
}

bool
SP_ExportLLPEP::WritePlaces()
{
  PlaceIdMap::iterator pIt;
  SP_Place* p;
  unsigned n = 1;

  m_file.Write(wxT("PL\n"));

  for (pIt = m_placeIdMap.begin(); pIt != m_placeIdMap.end(); pIt++) {
    p = (*pIt).second;

    // we don't do any layout, all nodes are placed at the same place
    m_file.Write(wxString::Format(wxT("%u\"%s\"10@10n15@15"),
				  n, p->m_name.c_str()));

    if (p->m_marking > 0) {
          m_file.Write(wxString::Format(wxT("M%um%u"),
				  p->m_marking, p->m_marking));
    }
    m_file.Write(wxT("k-1\n"));
    m_placeIdNrMap[p->m_id] = n;
    n++;
  }
  return TRUE;
}


bool
SP_ExportLLPEP::WriteTransitions()
{

  TransitionIdMap::iterator tIt;
  SP_Transition* t;
  unsigned n = 1;

  m_file.Write(wxT("TR\n"));

  for (tIt = m_trIdMap.begin(); tIt != m_trIdMap.end(); tIt++) {
    t = (*tIt).second;

    m_file.Write(wxString::Format(wxT("%u\"%s\"10@10n15@15\n"),
				  n, t->m_name.c_str()));

    m_trIdNrMap[t->m_id] = n;
    n++;
  }
  return TRUE;
}

bool
SP_ExportLLPEP::WriteArcs()
{
  TransitionIdMap::iterator tIt;
  SP_Transition* t;
  list<SP_DiscrArc*>* aList;
  list<SP_DiscrArc*>::iterator aIt;
  SP_DiscrArc* a;

  m_file.Write(wxT("TP\n"));

  for (tIt = m_trIdMap.begin(); tIt != m_trIdMap.end(); tIt++) {
    t = (*tIt).second;
    aList = m_postTrMap[t->m_id];
    if (aList) {
      for (aIt = aList->begin(); aIt != aList->end(); aIt++) {
	a = (*aIt);
	m_file.Write(wxString::Format(wxT("%u<%u"),
				      m_trIdNrMap[t->m_id],
				      m_placeIdNrMap[a->m_id]));
	if (a->m_mult > 1) {
	  m_file.Write(wxString::Format(wxT("w%u"),
					a->m_mult));
	}
	m_file.Write(wxT("\n"));
      }
    }
  }

  m_file.Write(wxT("PT\n"));

  for (tIt = m_trIdMap.begin(); tIt != m_trIdMap.end(); tIt++) {
    t = (*tIt).second;
    aList = m_preTrMap[t->m_id];
    if (aList) {
      for (aIt = aList->begin(); aIt != aList->end(); aIt++) {
	a = (*aIt);

	m_file.Write(wxString::Format(wxT("%u>%u"),
				      m_placeIdNrMap[a->m_id],
				      m_trIdNrMap[t->m_id]));
	if (a->m_mult > 1) {
	  m_file.Write(wxString::Format(wxT("w%u"),
					a->m_mult));
	}

	m_file.Write(wxT("\n"));

      }
    }
  }
  return TRUE;
}

