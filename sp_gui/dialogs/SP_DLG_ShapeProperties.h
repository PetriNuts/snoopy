//////////////////////////////////////////////////////////////////////
// $Source: $
// $Author: mf $
// $Version: 0.0 $
// $Revision: 1.30 $
// $Date: 2003/09/12 11:55:00 $
// Short Description: 
//////////////////////////////////////////////////////////////////////
#ifndef __SP_DLG_SHAPEPROPERTIES_H__
#define __SP_DLG_SHAPEPROPERTIES_H__

#include <wx/wx.h>
#include "sp_gui/widgets/SP_WDG_Notebook.h"
#include "sp_gui/widgets/SP_WDG_Treebook.h"
#include "sp_gui/widgets/SP_WDG_NotebookPage.h"
#include "sp_gui/windows/SP_GUI_Mainframe.h"
//! this dialog displays some data of an element
#include "sp_core/base/SP_Data.h"

class SP_WDG_DialogBase;
class SP_Graphic;

/**	\brief	The SP_DLG_ShapeProperties class

    Used to display all editable attributes of a given element
    (node or edge) and replay the changes into the datastructure,
    if the dialog is confirmed with "OK"
*/
class SP_DLG_ShapeProperties: public wxDialog
{
private:
    DECLARE_EVENT_TABLE()
    //! flag whether we show different shape types in the dialog
    //! resulting in multiple pages, one per original shape page
    bool m_bShowsDifferent;
    bool m_bShowOverview;
    //! the top level sizer
    wxBoxSizer* m_pcSizer;
    //! the notebook to have multiple pages, if needed
    wxBookCtrlBase* m_pcNotebook;
    //! list of widgets
    list<SP_WDG_DialogBase*> m_tlWidgets;
    map<wxString, SP_ListGraphic > m_mlGraphics;
	
    
    DECLARE_CLASS(SP_DLG_ShapeProperties)
protected:
	void Init();
    /**
     * This method applies the values of the dialog to the attributes
     */
    bool DoDlgApply();
	void CleanUpWidgets();
	void RebuildDialog();

public:
    SP_DLG_ShapeProperties(SP_GUI_Mainframe* p_pcParent, 
        const wxString& p_sTitle = wxT("Properties"),
        bool p_bShowDifferent = FALSE,
        long p_nStyle = wxDEFAULT_DIALOG_STYLE);

    SP_WDG_NotebookPage* AddPage(const wxString& p_sLabel = wxT(""), unsigned int p_nOrdering = std::numeric_limits<unsigned int>::max());

    /**	\brief	The ShowDialogAttributes function

	    \param	p_ptmAttributes	    Map of lists of attributes

	    \return	    TRUE in case of success, FALSE otherwise

	    This method is called from within the EditProperties function
        of nodes and edges and adds the attributes to this dialog.
        In case, that there are no attributes to be shown, this function
        should return FALSE and the dialog is not shown to the user.
    */
    bool ShowDialogAttributes(SP_MapString2ListAttribute* p_ptmAttributes);
    /* ACCESSORS */
    /** \brief The AddGraphic function

        \param  p_pcVal pointer to Graphic to be added

        \return TRUE in case of success, FALSE otherwise

        This method is called from within every graphic, which this
        dialog is used to show attributes of.
        The graphics are added to the core instance
        to be used for evaluation when the dialog is closed.
    */
    bool AddDialogGraphic(SP_Graphic* p_pcVal);
    inline bool GetShowsDifferent() const { return m_bShowsDifferent; }

    /* EVENTS */
    /**	\brief	The OnDlgApply function

	    \param	p_cEvent	the event object as generated by wx'

	    This method is called, if the user clicks the 'Apply' button
    */
    void OnDlgApply(wxCommandEvent& p_cEvent);
    /**	\brief	The OnDlgOk function

	    \param	p_cEvent	the event object as generated by wx'

	    This method is called, if the user clicks the 'OK' button
    */
    void OnDlgOk(wxCommandEvent& p_cEvent);
    /**	\brief	The OnDlgCancel function

	    \param	p_cEvent	the event object as generated by wx'

	    This method is called, if the user clicks the 'Cancel' button, pushes ESC
        or closes the dialog with the window-close methods of the ui-manager.
    */
    void OnDlgCancel(wxCommandEvent& p_cEvent);

    void OnRadio(wxCommandEvent& p_cEvent);

	list<SP_WDG_DialogBase*>* GettlWidgets(){ return &m_tlWidgets;}
};

#endif // __SP_DLG_SHAPEPROPERTIES_H__
